using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace FaceVault.Models;

public class Tag
{
    [Key]
    public int Id { get; set; }

    [Required]
    [MaxLength(100)]
    public string Name { get; set; } = string.Empty;

    [MaxLength(500)]
    public string? Description { get; set; }

    [MaxLength(7)]
    public string Color { get; set; } = "#0066CC";

    public DateTime DateCreated { get; set; } = DateTime.UtcNow;
    public DateTime? DateModified { get; set; }

    // Tag Hierarchy
    public int? ParentTagId { get; set; }

    // Tag Type and Classification
    public TagType TagType { get; set; } = TagType.User;
    public TagCategory Category { get; set; } = TagCategory.General;

    // Usage Statistics
    public int UsageCount { get; set; } = 0;
    public DateTime? LastUsed { get; set; }

    // Display and Behavior
    public bool IsVisible { get; set; } = true;
    public bool IsArchived { get; set; } = false;
    public int SortOrder { get; set; } = 0;

    // Additional Properties
    [MaxLength(50)]
    public string? Icon { get; set; }

    public double Confidence { get; set; } = 1.0;

    [Column(TypeName = "TEXT")]
    public string? MetadataJson { get; set; }

    // Navigation Properties
    [ForeignKey(nameof(ParentTagId))]
    public virtual Tag? ParentTag { get; set; }

    public virtual ICollection<Tag> ChildTags { get; set; } = new List<Tag>();
    public virtual ICollection<ImageTag> ImageTags { get; set; } = new List<ImageTag>();

    // Computed Properties
    [NotMapped]
    public bool HasParent => ParentTagId.HasValue;

    [NotMapped]
    public bool HasChildren => ChildTags.Any();

    [NotMapped]
    public string FullPath => GetFullPath();

    [NotMapped]
    public int Level => GetLevel();

    [NotMapped]
    public bool IsAutoGenerated => TagType == TagType.System || TagType == TagType.AI;

    // Helper Methods
    public string GetFullPath()
    {
        if (!HasParent) return Name;
        return $"{ParentTag?.GetFullPath()} > {Name}";
    }

    public int GetLevel()
    {
        if (!HasParent) return 0;
        return (ParentTag?.GetLevel() ?? 0) + 1;
    }

    public void UpdateUsage()
    {
        UsageCount++;
        LastUsed = DateTime.UtcNow;
        DateModified = DateTime.UtcNow;
    }

    public void SetParent(Tag? parent)
    {
        ParentTagId = parent?.Id;
        ParentTag = parent;
        DateModified = DateTime.UtcNow;
    }

    public void Archive()
    {
        IsArchived = true;
        IsVisible = false;
        DateModified = DateTime.UtcNow;
    }

    public void Restore()
    {
        IsArchived = false;
        IsVisible = true;
        DateModified = DateTime.UtcNow;
    }
}

// Junction table for many-to-many relationship between Images and Tags
public class ImageTag
{
    [Key]
    public int Id { get; set; }

    [Required]
    public int ImageId { get; set; }

    [Required]
    public int TagId { get; set; }

    public DateTime DateTagged { get; set; } = DateTime.UtcNow;

    // Tag Application Context
    public TaggedBy TaggedBy { get; set; } = TaggedBy.User;
    public double Confidence { get; set; } = 1.0;

    [MaxLength(200)]
    public string? Notes { get; set; }

    // Manual Verification
    public bool IsVerified { get; set; } = true;
    public DateTime? DateVerified { get; set; }

    // Navigation Properties
    [ForeignKey(nameof(ImageId))]
    public virtual Image Image { get; set; } = null!;

    [ForeignKey(nameof(TagId))]
    public virtual Tag Tag { get; set; } = null!;

    // Helper Methods
    public void Verify(bool isCorrect = true)
    {
        IsVerified = isCorrect;
        DateVerified = DateTime.UtcNow;
    }

    public void SetAutoTagged(double confidence)
    {
        TaggedBy = TaggedBy.AI;
        Confidence = confidence;
        IsVerified = false; // Auto tags need verification
    }
}

// Enums
public enum TagType
{
    User = 0,
    System = 1,
    AI = 2,
    Import = 3
}

public enum TagCategory
{
    General = 0,
    People = 1,
    Places = 2,
    Events = 3,
    Objects = 4,
    Activities = 5,
    Emotions = 6,
    Technical = 7
}

public enum TaggedBy
{
    User = 0,
    AI = 1,
    System = 2,
    Import = 3
}