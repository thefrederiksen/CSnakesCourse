@page "/database-scan"
@using FaceVault.Data
@using FaceVault.Models
@using FaceVault.Services
@using Microsoft.EntityFrameworkCore
@using CSnakes.Runtime
@using CSnakes.Runtime.Python
@using System.Collections.Generic
@implements IDisposable
@inject FaceVaultDbContext DbContext
@inject IPathService PathService
@inject IPythonEnvironment PythonEnv
@inject NavigationManager Navigation
@inject ILogger<DatabaseScan> Logger

<PageTitle>Database AI Analysis - FaceVault</PageTitle>

<div class="container-fluid">
    <h1 class="display-4">Database AI Analysis</h1>
    <p class="lead">AI-powered image analysis for database images</p>
    
    @if (!aiConfigured)
    {
        <!-- AI Setup Required -->
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card border-warning">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="mb-0"><span class="oi oi-warning" aria-hidden="true"></span> AI Configuration Required</h5>
                    </div>
                    <div class="card-body text-center py-5">
                        <i class="oi oi-cog" style="font-size: 4rem; color: #ffc107;"></i>
                        <h3 class="mt-3">AI Analysis Not Configured</h3>
                        <p class="lead text-muted">To use AI-powered image analysis, you need to configure your AI settings first.</p>
                        
                        <div class="alert alert-light border mt-4" role="alert">
                            <h6 class="alert-heading">What you need to configure:</h6>
                            <ul class="text-start mb-0">
                                <li><strong>AI Provider</strong> - Select your AI service (OpenAI, Azure, etc.)</li>
                                <li><strong>API Key</strong> - Your authentication key for the AI service</li>
                                <li><strong>API Endpoint</strong> - The service URL (if required)</li>
                                <li><strong>Model Selection</strong> - Choose the AI model to use</li>
                            </ul>
                        </div>

                        <div class="mt-4">
                            <a href="/settings#ai-settings" class="btn btn-warning btn-lg">
                                <span class="oi oi-cog" aria-hidden="true"></span> Configure AI Settings
                            </a>
                        </div>
                        
                        <p class="text-muted mt-3">
                            <small>Once configured, return here to analyze your images with AI.</small>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- AI is configured, show normal interface -->
        <div class="alert alert-info" role="alert">
            <h4 class="alert-heading">ðŸ¤– AI Analysis Features</h4>
            <p>This scanner analyzes images already in the database using AI to determine:</p>
            <ul class="mb-0">
                <li>Image category (people, objects, scenes, etc.)</li>
                <li>Content description and tags</li>
                <li>Quality assessment</li>
                <li>Potential issues or interesting features</li>
            </ul>
        </div>

        <div class="row">
            <div class="col-md-8">
            <!-- Analysis Configuration -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-cog" aria-hidden="true"></span> Analysis Configuration</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Analysis Scope</label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="analysisScope" id="unanalyzedOnly" 
                                   @onchange="@(() => analyzeOnlyUnprocessed = true)" checked="@analyzeOnlyUnprocessed">
                            <label class="form-check-label" for="unanalyzedOnly">
                                Only unanalyzed images (@unanalyzedCount images)
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="analysisScope" id="allImages" 
                                   @onchange="@(() => analyzeOnlyUnprocessed = false)" checked="@(!analyzeOnlyUnprocessed)">
                            <label class="form-check-label" for="allImages">
                                All images in database (@totalImagesInDb images)
                            </label>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Batch Size</label>
                        <select class="form-select" @bind="batchSize">
                            <option value="1">1 image (slowest, most detailed)</option>
                            <option value="5">5 images</option>
                            <option value="10">10 images (recommended)</option>
                            <option value="25">25 images</option>
                            <option value="50">50 images (fastest)</option>
                        </select>
                        <div class="form-text">Smaller batches provide more detailed analysis but take longer.</div>
                    </div>
                </div>
            </div>

            <!-- Analysis Progress -->
            @if (isAnalyzing || analysisCompleted)
            {
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <span class="oi oi-@(isAnalyzing ? "media-play" : "check")" aria-hidden="true"></span> 
                            Analysis Progress
                        </h5>
                        @if (isAnalyzing)
                        {
                            <button class="btn btn-outline-danger btn-sm" @onclick="CancelAnalysis">
                                <span class="oi oi-media-stop" aria-hidden="true"></span> Cancel
                            </button>
                        }
                    </div>
                    <div class="card-body">
                        @if (isAnalyzing)
                        {
                            <div class="mb-3">
                                <div class="d-flex justify-content-between mb-2">
                                    <span>@currentStatus</span>
                                    <span><strong>@processedImages</strong> / @totalToAnalyze images</span>
                                </div>
                                <div class="progress mb-2" style="height: 24px;">
                                    @if (totalToAnalyze > 0)
                                    {
                                        var percent = (double)processedImages / totalToAnalyze * 100;
                                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                             style="width: @(percent)%" 
                                             role="progressbar">
                                            @(percent.ToString("F1"))%
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="progress-bar progress-bar-striped progress-bar-animated bg-info" 
                                             style="width: 100%" role="progressbar">
                                            Preparing analysis...
                                        </div>
                                    }
                                </div>
                                
                                @if (!string.IsNullOrEmpty(currentImage))
                                {
                                    <div class="small text-muted">
                                        <strong>Current:</strong> @currentImage
                                    </div>
                                }
                                
                                @if (analysisResults.Any())
                                {
                                    <div class="mt-3">
                                        <h6>Recent Analysis Results:</h6>
                                        <div class="small">
                                            @foreach (var result in analysisResults.TakeLast(3))
                                            {
                                                <div class="border rounded p-2 mb-1 bg-light">
                                                    <strong>@result.FileName:</strong> @result.Category 
                                                    @if (!string.IsNullOrEmpty(result.Description))
                                                    {
                                                        <br><span class="text-muted">@result.Description</span>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                        @if (analysisCompleted && !isAnalyzing)
                        {
                            <div class="alert alert-@(analysisSuccessful ? "success" : "danger")" role="alert">
                                <h6 class="alert-heading">
                                    <span class="oi oi-@(analysisSuccessful ? "check" : "x")" aria-hidden="true"></span>
                                    Analysis @(analysisSuccessful ? "Completed Successfully" : "Failed")
                                </h6>
                                <hr>
                                <div class="row">
                                    <div class="col-md-3">
                                        <strong>@totalToAnalyze</strong><br>
                                        <small>Images Queued</small>
                                    </div>
                                    <div class="col-md-3">
                                        <strong>@successfulAnalyses</strong><br>
                                        <small>Successfully Analyzed</small>
                                    </div>
                                    <div class="col-md-3">
                                        <strong>@skippedImages</strong><br>
                                        <small>Skipped/Missing</small>
                                    </div>
                                    <div class="col-md-3">
                                        <strong>@errorCount</strong><br>
                                        <small>Errors</small>
                                    </div>
                                </div>
                                
                                @if (!string.IsNullOrEmpty(analysisError))
                                {
                                    <hr>
                                    <p class="mb-0 text-danger"><strong>Error:</strong> @analysisError</p>
                                }
                            </div>

                            @if (analysisResults.Any())
                            {
                                <div class="mt-3">
                                    <h6>Analysis Summary by Category:</h6>
                                    <div class="row">
                                        @foreach (var categoryGroup in analysisResults.GroupBy(r => r.Category).OrderByDescending(g => g.Count()))
                                        {
                                            <div class="col-md-6 mb-2">
                                                <span class="badge bg-primary me-2">@categoryGroup.Count()</span>
                                                <strong>@categoryGroup.Key</strong>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            }

            <!-- Action Buttons -->
            <div class="card">
                <div class="card-body">
                    <div class="d-grid">
                        <button class="btn btn-primary btn-lg" @onclick="StartAnalysis" 
                                disabled="@(isAnalyzing || totalToAnalyze == 0)">
                            @if (isAnalyzing)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            <span class="oi oi-eye" aria-hidden="true"></span> Start AI Analysis
                        </button>
                    </div>
                    
                    @if (totalToAnalyze == 0 && !isAnalyzing)
                    {
                        <div class="text-center text-muted mt-2">
                            <small>No images to analyze. Run Photo Scan first to add images to the database.</small>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <!-- Database Statistics -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-graph" aria-hidden="true"></span> Database Statistics</h5>
                </div>
                <div class="card-body">
                    <div class="row text-center mb-3">
                        <div class="col-6">
                            <strong>@totalImagesInDb</strong><br>
                            <small class="text-muted">Total Images</small>
                        </div>
                        <div class="col-6">
                            <strong>@analyzedCount</strong><br>
                            <small class="text-muted">Analyzed</small>
                        </div>
                    </div>
                    <div class="row text-center">
                        <div class="col-6">
                            <strong>@unanalyzedCount</strong><br>
                            <small class="text-muted">Unanalyzed</small>
                        </div>
                        <div class="col-6">
                            <strong>@(totalImagesInDb > 0 ? (analyzedCount * 100 / totalImagesInDb).ToString("F1") : "0")%</strong><br>
                            <small class="text-muted">Complete</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- AI Information -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-info" aria-hidden="true"></span> AI Analysis Info</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <h6>AI Provider:</h6>
                        <span class="badge bg-primary">@(aiProvider ?? "Not configured")</span>
                    </div>
                    
                    <h6>Categories Detected:</h6>
                    <div class="small mb-3">
                        <span class="badge bg-secondary me-1">People</span>
                        <span class="badge bg-secondary me-1">Animals</span>
                        <span class="badge bg-secondary me-1">Nature</span>
                        <span class="badge bg-secondary me-1">Objects</span>
                        <span class="badge bg-secondary me-1">Scenes</span>
                        <span class="badge bg-secondary me-1">Screenshots</span>
                        <span class="badge bg-secondary me-1">Documents</span>
                    </div>

                    <h6>What Gets Analyzed:</h6>
                    <ul class="small">
                        <li>Visual content and subjects</li>
                        <li>Scene and context</li>
                        <li>Image quality metrics</li>
                        <li>Potential tags and keywords</li>
                    </ul>
                </div>
            </div>

            <!-- Python Status -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><span class="oi oi-code" aria-hidden="true"></span> Python Status</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <span>Python Environment</span>
                        <span class="badge bg-@(pythonAvailable ? "success" : "danger")">
                            @(pythonAvailable ? "Ready" : "Not Available")
                        </span>
                    </div>
                    @if (!pythonAvailable)
                    {
                        <div class="small text-muted mt-2">
                            Python environment or analysis module not available. Check application logs.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    }
    
    <!-- Back Button (always visible) -->
    <div class="mt-4">
        <button class="btn btn-outline-secondary" @onclick="GoBack">
            <span class="oi oi-arrow-left" aria-hidden="true"></span> Back to Home
        </button>
    </div>
</div>

@code {
    private bool aiConfigured = false;
    private string? aiProvider = null;
    private bool hasApiKey = false;
    
    private bool analyzeOnlyUnprocessed = true;
    private int batchSize = 10;
    
    private bool isAnalyzing = false;
    private bool analysisCompleted = false;
    private bool analysisSuccessful = false;
    private string currentStatus = "";
    private string currentImage = "";
    private int processedImages = 0;
    private int totalToAnalyze = 0;
    private int successfulAnalyses = 0;
    private int skippedImages = 0;
    private int errorCount = 0;
    private string analysisError = "";
    
    private int totalImagesInDb = 0;
    private int analyzedCount = 0;
    private int unanalyzedCount = 0;
    private bool pythonAvailable = false;
    
    private CancellationTokenSource? cancellationTokenSource;
    private List<AnalysisResult> analysisResults = new();

    public class AnalysisResult
    {
        public string FileName { get; set; } = "";
        public string Category { get; set; } = "";
        public string Description { get; set; } = "";
        public double Confidence { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await CheckAIConfiguration();
        await LoadDatabaseStats();
        if (aiConfigured)
        {
            await CheckPythonAvailability();
        }
    }

    private async Task CheckAIConfiguration()
    {
        try
        {
            // Check if AI settings exist in the database
            var settings = await DbContext.tbl_app_settings.FirstOrDefaultAsync();
            
            if (settings != null)
            {
                // Check if AI is enabled and configured
                aiConfigured = settings.EnableAIImageAnalysis == 1 &&
                              !string.IsNullOrWhiteSpace(settings.AIProvider) &&
                              !string.IsNullOrWhiteSpace(settings.AIApiKey);
                
                if (aiConfigured)
                {
                    aiProvider = settings.AIProvider;
                    hasApiKey = !string.IsNullOrWhiteSpace(settings.AIApiKey);
                    Logger.LogInformation("AI configuration found: Provider={Provider}", aiProvider);
                }
                else
                {
                    Logger.LogInformation("AI not configured: EnableAI={EnableAI}, Provider={Provider}, HasKey={HasKey}",
                        settings.EnableAIImageAnalysis,
                        !string.IsNullOrWhiteSpace(settings.AIProvider),
                        !string.IsNullOrWhiteSpace(settings.AIApiKey));
                }
            }
            else
            {
                Logger.LogWarning("No application settings found in database");
                aiConfigured = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking AI configuration");
            aiConfigured = false;
        }
        
        StateHasChanged();
    }

    private async Task LoadDatabaseStats()
    {
        try
        {
            totalImagesInDb = await DbContext.tbl_images.CountAsync(i => i.IsDeleted == 0);
            analyzedCount = await DbContext.tbl_image_analysis.CountAsync();
            unanalyzedCount = totalImagesInDb - analyzedCount;
            
            // Update total to analyze based on current setting
            totalToAnalyze = analyzeOnlyUnprocessed ? unanalyzedCount : totalImagesInDb;
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading database statistics");
        }
    }

    private async Task CheckPythonAvailability()
    {
        await Task.Run(() =>
        {
            try
            {
                // Try to import the image analysis module
                // CSnakes generates methods based on Python file names
                // For "image_analysis_module.py", the method should be ImageAnalysisModule()
                var testResult = PythonEnv.ImageAnalysisModule().TestAnalysis();
                pythonAvailable = true;
                string testResultStr = testResult;
                Logger.LogDebug("Python image analysis module loaded successfully: {TestResult}", testResultStr);
            }
            catch (Exception ex)
            {
                pythonAvailable = false;
                Logger.LogError(ex, "Python image analysis module not available: {Message}", ex.Message);
            }
        });
        StateHasChanged();
    }

    private async Task StartAnalysis()
    {
        // Immediate feedback - show we're starting
        isAnalyzing = true;
        analysisCompleted = false;
        analysisSuccessful = false;
        analysisError = "";
        processedImages = 0;
        successfulAnalyses = 0;
        skippedImages = 0;
        errorCount = 0;
        analysisResults.Clear();
        currentStatus = "Starting AI analysis...";
        StateHasChanged();
        
        // Check Python availability with user feedback
        if (!pythonAvailable)
        {
            analysisError = "Python environment is not available. Please check your Python installation and restart the application.";
            isAnalyzing = false;
            analysisCompleted = true;
            analysisSuccessful = false;
            StateHasChanged();
            return;
        }
        
        // Check AI configuration again with feedback
        var settings = await DbContext.tbl_app_settings.FirstOrDefaultAsync();
        if (settings == null || settings.EnableAIImageAnalysis != 1 || 
            string.IsNullOrWhiteSpace(settings.AIProvider) || 
            string.IsNullOrWhiteSpace(settings.AIApiKey))
        {
            analysisError = "AI configuration is incomplete. Please configure AI settings before running analysis.";
            isAnalyzing = false;
            analysisCompleted = true;
            analysisSuccessful = false;
            StateHasChanged();
            return;
        }

        var startTime = DateTime.Now;
        
        try
        {
            cancellationTokenSource = new CancellationTokenSource();
            
            currentStatus = "Loading images from database...";
            StateHasChanged();
            
            // Small delay to ensure UI updates
            await Task.Delay(100);

            // Get images that need analysis
            var imagesToAnalyze = analyzeOnlyUnprocessed
                ? await DbContext.tbl_images
                    .Where(i => i.IsDeleted == 0 && !DbContext.tbl_image_analysis.Any(a => a.ImageId == i.ImageId))
                    .OrderBy(i => i.DateCreated)
                    .ToListAsync()
                : await DbContext.tbl_images
                    .Where(i => i.IsDeleted == 0)
                    .OrderBy(i => i.DateCreated)
                    .ToListAsync();

            totalToAnalyze = imagesToAnalyze.Count;
            
            if (totalToAnalyze == 0)
            {
                currentStatus = "No images to analyze.";
                analysisError = analyzeOnlyUnprocessed 
                    ? "All images have already been analyzed. Switch to 'All images' mode to re-analyze."
                    : "No images found in the database. Please run Photo Scan first.";
                analysisCompleted = true;
                analysisSuccessful = false;
                isAnalyzing = false;
                StateHasChanged();
                return;
            }
            
            currentStatus = $"Starting analysis of {totalToAnalyze} images...";
            StateHasChanged();
            await Task.Delay(100);

            // Process images in batches
            startTime = DateTime.Now;
            
            for (int i = 0; i < imagesToAnalyze.Count; i += batchSize)
            {
                if (cancellationTokenSource.Token.IsCancellationRequested)
                {
                    analysisError = "Analysis was cancelled by user.";
                    currentStatus = "Analysis cancelled.";
                    break;
                }

                var batch = imagesToAnalyze.Skip(i).Take(batchSize).ToList();
                
                foreach (var image in batch)
                {
                    if (cancellationTokenSource.Token.IsCancellationRequested)
                        break;

                    try
                    {
                        currentImage = image.FileName;
                        currentStatus = $"Analyzing: {currentImage}";
                        
                        // Try to construct full file path using settings from outer scope
                        string fullPath;
                        
                        // First try: If image has an absolute path already
                        if (Path.IsPathRooted(image.RelativePath))
                        {
                            fullPath = image.RelativePath;
                        }
                        // Second try: Use PhotoDirectory from settings
                        else if (settings != null && !string.IsNullOrWhiteSpace(settings.PhotoDirectory))
                        {
                            fullPath = Path.Combine(settings.PhotoDirectory, image.RelativePath);
                        }
                        // Third try: Use default Pictures folder
                        else
                        {
                            var picturesPath = Environment.GetFolderPath(Environment.SpecialFolder.MyPictures);
                            fullPath = Path.Combine(picturesPath, image.RelativePath);
                        }
                        
                        if (!File.Exists(fullPath))
                        {
                            skippedImages++;
                            Logger.LogWarning("Image file not found: {FilePath}, RelativePath: {RelativePath}", fullPath, image.RelativePath);
                            processedImages++;
                            continue;
                        }
                        
                        // Call Python analysis function with individual parameters
                        var analysisResult = PythonEnv.ImageAnalysisModule().AnalyzeImageWithAi(
                            fullPath,
                            settings?.AIProvider ?? "",
                            settings?.AIApiKey ?? "",
                            settings?.AIModel ?? "",
                            settings?.AIApiEndpoint ?? ""
                        );
                        
                        // Parse the Python result
                        string category = analysisResult["category"]?.ToString() ?? "Unknown";
                        string description = analysisResult["description"]?.ToString() ?? "";
                        double confidence = Convert.ToDouble(analysisResult["confidence"]?.ToString() ?? "0.0");
                        string modelUsed = analysisResult["model"]?.ToString() ?? "Basic Image Analysis";
                        
                        // Store result in database
                        var existingAnalysis = await DbContext.tbl_image_analysis
                            .FirstOrDefaultAsync(a => a.ImageId == image.ImageId);

                        if (existingAnalysis != null)
                        {
                            // Update existing
                            existingAnalysis.ImageCategory = category;
                            existingAnalysis.AIDescription = description;
                            existingAnalysis.AIAnalyzedAt = DateTime.UtcNow;
                            existingAnalysis.AIModelUsed = modelUsed;
                        }
                        else
                        {
                            // Create new analysis record
                            var newAnalysis = new tbl_image_analysis
                            {
                                ImageId = image.ImageId,
                                ImageCategory = category,
                                AIDescription = description,
                                AIAnalyzedAt = DateTime.UtcNow,
                                AIModelUsed = modelUsed
                            };
                            DbContext.tbl_image_analysis.Add(newAnalysis);
                        }

                        await DbContext.SaveChangesAsync();
                        
                        // Add to results for display
                        analysisResults.Add(new AnalysisResult
                        {
                            FileName = image.FileName,
                            Category = category,
                            Description = description,
                            Confidence = confidence
                        });

                        successfulAnalyses++;
                        processedImages++;
                        
                        // Update UI with time estimation
                        if (processedImages % 5 == 0 || processedImages == totalToAnalyze)
                        {
                            // Calculate time remaining
                            var elapsed = DateTime.Now - startTime;
                            var avgTimePerImage = elapsed.TotalSeconds / processedImages;
                            var remainingImages = totalToAnalyze - processedImages;
                            var estimatedTimeRemaining = TimeSpan.FromSeconds(avgTimePerImage * remainingImages);
                            
                            currentStatus = $"Analyzing: {currentImage} ({processedImages}/{totalToAnalyze}) - Est. {estimatedTimeRemaining:mm\\:ss} remaining";
                            
                            StateHasChanged();
                            await Task.Delay(1); // Allow UI to update
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error analyzing image: {ImagePath}", image.RelativePath);
                        errorCount++;
                        processedImages++;
                        
                        // Add error to results so user can see what failed
                        analysisResults.Add(new AnalysisResult
                        {
                            FileName = image.FileName,
                            Category = "Error",
                            Description = $"Failed: {ex.Message}",
                            Confidence = 0
                        });
                        
                        // If too many errors, stop
                        if (errorCount > 10 && errorCount > successfulAnalyses)
                        {
                            analysisError = $"Too many errors ({errorCount}). Stopping analysis. Check your AI configuration.";
                            currentStatus = "Analysis stopped due to errors.";
                            break;
                        }
                    }
                }
            }

            analysisSuccessful = string.IsNullOrEmpty(analysisError);
            analysisCompleted = true;
            currentStatus = analysisSuccessful ? "Analysis completed successfully!" : "Analysis completed with errors.";
            
            await LoadDatabaseStats(); // Refresh stats
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "AI analysis failed: {Message}", ex.Message);
            
            // Provide user-friendly error message
            if (ex.Message.Contains("connection") || ex.Message.Contains("network"))
            {
                analysisError = "Network connection error. Please check your internet connection and API settings.";
            }
            else if (ex.Message.Contains("unauthorized") || ex.Message.Contains("401"))
            {
                analysisError = "Authentication failed. Please check your API key in Settings.";
            }
            else if (ex.Message.Contains("quota") || ex.Message.Contains("limit"))
            {
                analysisError = "API quota exceeded. Please check your API usage limits.";
            }
            else
            {
                analysisError = $"Analysis failed: {ex.Message}. Please check the logs for more details.";
            }
            
            currentStatus = "Analysis failed due to an error.";
            analysisSuccessful = false;
            analysisCompleted = true;
        }
        finally
        {
            isAnalyzing = false;
            cancellationTokenSource?.Dispose();
            
            // Final status update
            if (analysisCompleted && string.IsNullOrEmpty(analysisError))
            {
                currentStatus = $"Analysis completed! Processed {processedImages} images in {(DateTime.Now - startTime):mm\\:ss}";
            }
            
            StateHasChanged();
        }
    }

    private void CancelAnalysis()
    {
        cancellationTokenSource?.Cancel();
        currentStatus = "Cancelling analysis...";
        StateHasChanged();
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    public void Dispose()
    {
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
    }
}