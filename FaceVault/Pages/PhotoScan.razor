@page "/photo-scan"
@using FaceVault.Services
@inject IPhotoScannerService PhotoScannerService
@inject ISettingsService SettingsService
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Photo Scanner - FaceVault</PageTitle>

<h1>Photo Scanner</h1>

<div class="row">
    <div class="col-md-8">
        <!-- Scanner Configuration ---->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0"><span class="oi oi-magnifying-glass" aria-hidden="true"></span> Scan Configuration</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-9">
                        <div class="mb-3">
                            <label for="scanDirectory" class="form-label">Directory to Scan</label>
                            <input type="text" class="form-control" id="scanDirectory" 
                                   @bind="scanDirectory" placeholder="Select directory to scan...">
                            <div class="form-text">Choose the folder containing photos to scan</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">&nbsp;</label>
                        <button class="btn btn-outline-primary w-100" @onclick="BrowseForDirectory">
                            <span class="oi oi-folder" aria-hidden="true"></span> Browse
                        </button>
                    </div>
                </div>
                
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="includeSubdirectories" 
                                   @bind="includeSubdirectories">
                            <label class="form-check-label" for="includeSubdirectories">
                                Include subdirectories
                            </label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="quickScanFirst" 
                                   @bind="quickScanFirst">
                            <label class="form-check-label" for="quickScanFirst">
                                Quick scan first (count files only)
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Scan Progress ---->
        @if (isScanning || scanResult != null)
        {
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <span class="oi oi-@(isScanning ? "media-play" : "check")" aria-hidden="true"></span> 
                        Scan Progress
                    </h5>
                    @if (isScanning)
                    {
                        <button class="btn btn-outline-danger btn-sm" @onclick="CancelScan">
                            <span class="oi oi-media-stop" aria-hidden="true"></span> Cancel
                        </button>
                    }
                </div>
                <div class="card-body">
                    @if (isScanning && scanProgress != null)
                    {
                        <div class="mb-3">
                            <div class="d-flex justify-content-between mb-2">
                                <span>@scanProgress.Message</span>
                                <span>@scanProgress.ProcessedCount / @scanProgress.TotalCount</span>
                            </div>
                            <div class="progress mb-2">
                                <div class="progress-bar" role="progressbar" 
                                     style="width: @(scanProgress.PercentComplete)%" 
                                     aria-valuenow="@(scanProgress.PercentComplete)" 
                                     aria-valuemin="0" aria-valuemax="100">
                                    @(scanProgress.PercentComplete.ToString("F1"))%
                                </div>
                            </div>
                            <div class="row text-center">
                                <div class="col-md-3">
                                    <small class="text-muted">Current File:</small><br>
                                    <span class="small">@scanProgress.CurrentFile</span>
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">Phase:</small><br>
                                    <span class="badge bg-info">@scanProgress.Phase</span>
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">Progress:</small><br>
                                    <strong>@scanProgress.ProcessedCount</strong> / @scanProgress.TotalCount
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">Completed:</small><br>
                                    <strong>@(scanProgress.PercentComplete.ToString("F1"))%</strong>
                                </div>
                            </div>
                        </div>
                    }

                    @if (scanResult != null && !isScanning)
                    {
                        <div class="alert alert-@(scanResult.IsSuccess ? "success" : scanResult.IsCancelled ? "warning" : "danger")" role="alert">
                            <h6 class="alert-heading">
                                @if (scanResult.IsSuccess)
                                {
                                    <span class="oi oi-check" aria-hidden="true"></span><text> Scan Completed Successfully</text>
                                }
                                else if (scanResult.IsCancelled)
                                {
                                    <span class="oi oi-warning" aria-hidden="true"></span><text> Scan Cancelled</text>
                                }
                                else
                                {
                                    <span class="oi oi-x" aria-hidden="true"></span><text> Scan Failed</text>
                                }
                            </h6>
                            <hr>
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>@scanResult.TotalFilesFound</strong><br>
                                    <small>Files Found</small>
                                </div>
                                <div class="col-md-3">
                                    <strong>@scanResult.NewImagesCount</strong><br>
                                    <small>New Images</small>
                                </div>
                                <div class="col-md-3">
                                    <strong>@scanResult.SkippedCount</strong><br>
                                    <small>Skipped</small>
                                </div>
                                <div class="col-md-3">
                                    <strong>@scanResult.ErrorCount</strong><br>
                                    <small>Errors</small>
                                </div>
                            </div>
                            @if (scanResult.Duration.TotalSeconds > 0)
                            {
                                <hr>
                                <p class="mb-0">
                                    Duration: <strong>@scanResult.Duration.ToString(@"mm\:ss")</strong> | 
                                    Speed: <strong>@(scanResult.FilesPerSecond.ToString("F1"))</strong> files/sec
                                </p>
                            }
                            @if (!string.IsNullOrEmpty(scanResult.Error))
                            {
                                <hr>
                                <p class="mb-0 text-danger"><strong>Error:</strong> @scanResult.Error</p>
                            }
                        </div>

                        @if (scanResult.Errors.Any())
                        {
                            <div class="alert alert-warning" role="alert">
                                <h6 class="alert-heading">Processing Errors (@scanResult.Errors.Count)</h6>
                                <div class="accordion" id="errorAccordion">
                                    <div class="accordion-item">
                                        <h2 class="accordion-header" id="errorHeading">
                                            <button class="accordion-button collapsed" type="button" 
                                                    data-bs-toggle="collapse" data-bs-target="#errorCollapse">
                                                Show Error Details
                                            </button>
                                        </h2>
                                        <div id="errorCollapse" class="accordion-collapse collapse" 
                                             data-bs-parent="#errorAccordion">
                                            <div class="accordion-body">
                                                @foreach (var error in scanResult.Errors.Take(10))
                                                {
                                                    <div class="small text-muted mb-1">@error</div>
                                                }
                                                @if (scanResult.Errors.Count > 10)
                                                {
                                                    <div class="small text-muted">... and @(scanResult.Errors.Count - 10) more errors</div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }

        <!-- Action Buttons ---->
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <button class="btn btn-outline-secondary" @onclick="GoBack">
                            <span class="oi oi-arrow-left" aria-hidden="true"></span> Back to Home
                        </button>
                    </div>
                    <div>
                        @if (quickScanFirst && !hasRunQuickScan && !isScanning)
                        {
                            <button class="btn btn-info me-2" @onclick="RunQuickScan" disabled="@(string.IsNullOrEmpty(scanDirectory))">
                                <span class="oi oi-dashboard" aria-hidden="true"></span> Quick Scan
                            </button>
                        }
                        <button class="btn btn-primary" @onclick="StartFullScan" 
                                disabled="@(isScanning || string.IsNullOrEmpty(scanDirectory))">
                            @if (isScanning)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            <span class="oi oi-magnifying-glass" aria-hidden="true"></span> 
                            @(hasRunQuickScan ? "Start Full Scan" : "Start Scan")
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-4">
        <!-- Scan Statistics ---->
        <div class="card mb-3">
            <div class="card-header">
                <h5 class="mb-0"><span class="oi oi-graph" aria-hidden="true"></span> Scan Information</h5>
            </div>
            <div class="card-body">
                @if (quickScanResult != null)
                {
                    <div class="alert alert-info" role="alert">
                        <h6 class="alert-heading">Quick Scan Results</h6>
                        <p class="mb-0">Found <strong>@quickScanResult.TotalFilesFound</strong> image files in the selected directory.</p>
                    </div>
                }

                <div class="mb-3">
                    <h6>Supported File Types:</h6>
                    <div class="d-flex flex-wrap">
                        @foreach (var ext in supportedExtensions)
                        {
                            <span class="badge bg-secondary me-1 mb-1">@ext.ToUpper()</span>
                        }
                    </div>
                </div>

                <div class="mb-3">
                    <h6>Current Settings:</h6>
                    <ul class="list-unstyled small">
                        <li><strong>Include Subdirectories:</strong> @(includeSubdirectories ? "Yes" : "No")</li>
                        <li><strong>Batch Size:</strong> @batchSize files</li>
                        <li><strong>Auto-scan on Startup:</strong> @(autoScanOnStartup ? "Yes" : "No")</li>
                    </ul>
                </div>

                @if (lastScanInfo != null)
                {
                    <div class="mb-3">
                        <h6>Last Scan:</h6>
                        <ul class="list-unstyled small">
                            <li><strong>Date:</strong> @lastScanInfo.Value.ToString("MMM dd, yyyy HH:mm")</li>
                            <li><strong>Status:</strong> Available</li>
                        </ul>
                    </div>
                }
            </div>
        </div>

        <!-- Help Information ---->
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><span class="oi oi-question-mark" aria-hidden="true"></span> Help</h5>
            </div>
            <div class="card-body">
                <h6>Tips for Scanning:</h6>
                <ul class="small">
                    <li>Use Quick Scan first to estimate scan time</li>
                    <li>Large directories may take significant time to process</li>
                    <li>The scanner will skip files already in the database</li>
                    <li>Face recognition runs separately after scanning</li>
                    <li>You can cancel the scan at any time</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@code {
    private string scanDirectory = "";
    private bool includeSubdirectories = true;
    private bool quickScanFirst = true;
    private bool autoScanOnStartup = false;
    private int batchSize = 100;
    private string[] supportedExtensions = Array.Empty<string>();
    private DateTime? lastScanInfo;

    private bool isScanning = false;
    private bool hasRunQuickScan = false;
    private ScanProgress? scanProgress;
    private ScanResult? scanResult;
    private ScanResult? quickScanResult;
    private CancellationTokenSource? cancellationTokenSource;

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings();
        supportedExtensions = PhotoScannerService.GetSupportedExtensions();
    }

    private async Task LoadSettings()
    {
        try
        {
            var settings = await SettingsService.GetSettingsAsync();
            scanDirectory = settings.PhotoDirectory;
            includeSubdirectories = settings.ScanSubdirectories;
            autoScanOnStartup = settings.AutoScanOnStartup;
            batchSize = settings.BatchSize;
            lastScanInfo = settings.LastScanDate;
        }
        catch (Exception ex)
        {
            Logger.Error($"Error loading scanner settings: {ex.Message}");
        }
    }

    private Task BrowseForDirectory()
    {
        // Placeholder for folder browser dialog
        // In a real implementation, this would open a native folder browser
        return Task.CompletedTask;
    }

    private async Task RunQuickScan()
    {
        try
        {
            isScanning = true;
            quickScanResult = null;
            StateHasChanged();

            Logger.Info($"Starting quick scan of directory: {scanDirectory}");
            
            using var cts = new CancellationTokenSource(TimeSpan.FromMinutes(2)); // 2-minute timeout for quick scan
            quickScanResult = await PhotoScannerService.QuickScanAsync(scanDirectory, cts.Token);
            hasRunQuickScan = true;

            Logger.Info($"Quick scan completed: {quickScanResult.TotalFilesFound} files found");
        }
        catch (Exception ex)
        {
            Logger.Error($"Quick scan failed: {ex.Message}");
            quickScanResult = new ScanResult
            {
                DirectoryPath = scanDirectory,
                Error = ex.Message,
                StartTime = DateTime.UtcNow,
                EndTime = DateTime.UtcNow
            };
        }
        finally
        {
            isScanning = false;
            StateHasChanged();
        }
    }

    private async Task StartFullScan()
    {
        try
        {
            isScanning = true;
            scanResult = null;
            scanProgress = null;
            cancellationTokenSource = new CancellationTokenSource();
            StateHasChanged();

            Logger.Info($"Starting full scan of directory: {scanDirectory}");

            var progress = new Progress<ScanProgress>(progress =>
            {
                scanProgress = progress;
                StateHasChanged();
            });

            scanResult = await PhotoScannerService.ScanDirectoryAsync(
                scanDirectory, 
                progress, 
                cancellationTokenSource.Token);

            if (scanResult.IsSuccess)
            {
                Logger.Info($"Full scan completed successfully: {scanResult.NewImagesCount} new images added");
            }
            else if (scanResult.IsCancelled)
            {
                Logger.Info("Scan was cancelled by user");
            }
            else
            {
                Logger.Error($"Scan failed: {scanResult.Error}");
            }
        }
        catch (Exception ex)
        {
            Logger.Error($"Full scan failed: {ex.Message}");
            scanResult = new ScanResult
            {
                DirectoryPath = scanDirectory,
                Error = ex.Message,
                StartTime = DateTime.UtcNow,
                EndTime = DateTime.UtcNow
            };
        }
        finally
        {
            isScanning = false;
            cancellationTokenSource?.Dispose();
            cancellationTokenSource = null;
            StateHasChanged();
        }
    }

    private void CancelScan()
    {
        cancellationTokenSource?.Cancel();
        Logger.Info("Scan cancellation requested");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    public void Dispose()
    {
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
    }
}