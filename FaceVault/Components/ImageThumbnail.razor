@using FaceVault.Services
@inject IImageService ImageService

@if (!string.IsNullOrEmpty(imageDataUrl))
{
    <img src="@imageDataUrl" 
         class="card-img-top photo-thumbnail" 
         alt="@Photo.FileName"
         title="@GetPhotoTooltip()"
         loading="lazy" />
}
else if (!string.IsNullOrEmpty(fallbackImageUrl))
{
    <img src="@fallbackImageUrl" 
         class="card-img-top photo-thumbnail" 
         alt="@Photo.FileName"
         title="@GetPhotoTooltip()"
         loading="lazy" />
}
else if (isLoading)
{
    <div class="card-img-top photo-placeholder d-flex align-items-center justify-content-center">
        <div class="spinner-border spinner-border-sm text-muted" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="card-img-top photo-placeholder d-flex align-items-center justify-content-center">
        <div class="text-center">
            @if (IsHeicFile())
            {
                <span class="oi oi-camera-slr text-info mb-1" style="font-size: 2rem;" aria-hidden="true"></span>
                <small class="d-block text-info fw-bold">HEIC</small>
                <small class="d-block text-muted">Converting...</small>
            }
            else
            {
                <span class="oi oi-image text-muted mb-1" aria-hidden="true"></span>
                <small class="d-block text-muted">No preview</small>
            }
        </div>
    </div>
}

@code {
    [Parameter] public Models.Image Photo { get; set; } = default!;
    
    private string imageDataUrl = string.Empty;
    private string fallbackImageUrl = string.Empty;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Try to load thumbnail first
            imageDataUrl = await ImageService.GetImageDataUrlAsync(Photo.FilePath, 250);
        }
        catch (Exception ex)
        {
            Logger.Warning($"Error loading thumbnail for {Photo.FilePath}: {ex.Message}");
            
            // Try to use direct file URL as fallback
            try
            {
                fallbackImageUrl = $"/api/images/{Photo.Id}/view";
            }
            catch (Exception fallbackEx)
            {
                Logger.Error($"Error setting fallback URL for {Photo.FilePath}: {fallbackEx.Message}");
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private bool IsHeicFile()
    {
        if (Photo?.FilePath == null) return false;
        var extension = Path.GetExtension(Photo.FilePath).ToLowerInvariant();
        return extension == ".heic" || extension == ".heif";
    }

    private string GetPhotoTooltip()
    {
        var tooltip = $"{Photo.FileName}";
        if (Photo.DateTaken.HasValue)
        {
            tooltip += $"\nTaken: {Photo.DateTaken.Value:yyyy-MM-dd HH:mm}";
        }
        if (Photo.Width > 0 && Photo.Height > 0)
        {
            tooltip += $"\nSize: {Photo.Width}Ã—{Photo.Height}";
        }
        if (IsHeicFile())
        {
            tooltip += $"\nHEIC format - Click to open in default viewer";
        }
        return tooltip;
    }
}